import java_cup.runtime.*;

class GeauxToken {
	int linenum;
	int colnum;
	GeauxToken(int line,int col) {
		linenum=line;colnum=col;
	}
}

class GeauxIntLitToken extends GeauxToken {
	int intValue;
	GeauxIntLitToken(int val,int line,int col) {
	   super(line,col);intValue=val; 
	};
}

class GeauxIdentifierToken extends GeauxToken {
	String identifierText;
	GeauxIdentifierToken(String text,int line,int col) {
		super(line,col);identifierText=text;
	}
}

class GeauxCharLitToken extends GeauxToken {
	char charValue;
	GeauxCharLitToken(char val,int line,int col) {
		super(line,col);charValue=val;
	}
}

class GeauxStringLitToken extends GeauxToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	GeauxStringLitToken(String text,int line,int col) {
		super(line,col);
		stringText=text;
	}
}

class GeauxInvalidToken extends GeauxToken {
	String tokenText; // Full text of token
	GeauxInvalidToken(String text,int line,int col) {
		super(line,col);
		tokenText=text;
	}
}

class Pos {
	static int  linenum = 1; /* line number current token was scanned on */
	static int  colnum = 1; /* column number current token began at */
	static int  line = 1; /* line number after scanning current token  */
	static int  col = 1; /* column number after scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

/*
 *  This class causes a name conflict. In the parser `Symbol`
 *  refers to java_cup.runtime.Symbol.
 *
 *
class Symbol { 
	public int sym;
	public GeauxToken value;
	public Symbol(int tokenType, GeauxToken theToken) {
		sym = tokenType;
		value = theToken;
	}
}
*/
%%

DIGIT=[0-9]
LETTER=[A-Za-z]
BOOL=(b | B)(o | O)(o | O)(l | L)
BREAK=(b | B)(r | R)(e | E)(a | A)(k | K)
CHAR=(c | C)(h | H)(a | A)(r | R)
CONST=(c | C)(o | O)(n | N)(s | S)(t | T)
CONTINUE=(c | C)(o | O)(n | N)(t | T)(i | I)(n | N)(u | U)(e | E)
ELSE=(e | E)(l | L)(s | S)(e | E)
FALSE=(f | F)(a | A)(l | L)(s | S)(e | E)
FOR=(f | F)(o | O)(r | R)
FUNC=(f | F)(u | U)(n | N)(c | C)
IF=(i | I)(f | F)
INT=(i | I)(n | N)(t | T)
PACKAGE=(p | P)(a | A)(c | C)(k | K)(a | A)(g | G)(e | E)
PRINT=(p | P)(r | R)(i | I)(n | N)(t | T)
READ=(r | R)(e | E)(a | A)(d | D)
RETURN=(r | R)(e | E)(t | T)(u | U)(r | R)(n | N)
TRUE=(t | T)(r | R)(u | U)(e | E)
VAR=(v | V)(a | A)(r | R)

Id={LETTER}({LETTER}|{DIGIT})* 
IntLit=[~]?{DIGIT}[.]?{DIGIT}*
CharLit=[\']([^\n\\]|([\\][\'nt\\]))?[\']
StrLit=[\"][^\"\\]*(\\.[^\"\\]*)*[\"]

SingleComment=[/][/][^\n]*
MultiComment=#{2}(([#][^#])|[^#])*#{2}

%type Symbol
%eofval{
  return new Symbol(sym.EOF, new GeauxToken(0,0));
%eofval}

%%
{BOOL} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_BOOL,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{BREAK} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_BREAK,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{CHAR} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_CHAR,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{CONST} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_CONST,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{CONTINUE} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_CONTINUE,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{ELSE} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_ELSE,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{FALSE} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_FALSE,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{FOR} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_FOR,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{FUNC} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_FUNC,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{IF} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_IF,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{INT} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_INT,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{PACKAGE} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_PACKAGE,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{PRINT} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_PRINT,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{READ} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_READ,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{RETURN} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_RETURN,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{TRUE} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_TRUE,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
{VAR} {
    Pos.setpos();
    Pos.col += yytext().length();
    return new Symbol(sym.rw_VAR,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"("	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.LPAREN,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
")"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.RPAREN,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"["	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.LBRACKET,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"]"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.RBRACKET,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"="	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.ASG,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
";"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.SEMI,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"+"	{
    Pos.setpos();
    Pos.col += 1;
    return new Symbol(sym.PLUS,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"-"	{
    Pos.setpos();
    Pos.col += 1;
    return new Symbol(sym.MINUS,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"*"	{
    Pos.setpos();
    Pos.col += 1;
    return new Symbol(sym.TIMES,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"/"	{
    Pos.setpos();
    Pos.col += 1;
    return new Symbol(sym.SLASH,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"=="	{
    Pos.setpos();
    Pos.col +=2;
    return new Symbol(sym.EQ, 
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"!="	{
    Pos.setpos();
    Pos.col +=2;
    return new Symbol(sym.NOTEQ, 
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"&&"	{
    Pos.setpos();
    Pos.col +=2;
    return new Symbol(sym.CAND,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"||"	{
    Pos.setpos();
    Pos.col +=2;
    return new Symbol(sym.COR, 
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"<"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.LT,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
">"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.GT,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"<="	{
    Pos.setpos();
    Pos.col +=2;
    return new Symbol(sym.LEQ,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
">="	{
    Pos.setpos();
    Pos.col +=2;
    return new Symbol(sym.GEQ,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
","	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.COMMA,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"!"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.NOT,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"{"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.LBRACE,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
"}"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.RBRACE, 
        new GeauxToken(Pos.linenum,Pos.colnum));
}
":"	{
    Pos.setpos();
    Pos.col +=1;
    return new Symbol(sym.COLON,
        new GeauxToken(Pos.linenum,Pos.colnum));
}
\n	{
    Pos.setpos();
    Pos.line += 1;
    Pos.col = 1;
}
" "	{
    Pos.setpos();
    Pos.col += 1;
}
\t  {
    Pos.setpos();
    Pos.col += 1;
}
{Id} {
    Pos.setpos(); 
    Pos.col += yytext().length();
    return new Symbol(sym.IDENTIFIER,
        new GeauxIdentifierToken(yytext(), 
            Pos.linenum,Pos.colnum));
}
{IntLit}	{
    String token = yytext();
    int value = 0;
    Pos.setpos(); 
    Pos.col += token.length();
    if (token.charAt(0) == '~') {
        //use the appropriate signage
        token = "-" + token.substring(1, token.length());
    } 

    try {
        value = Integer.parseInt(token);
    } catch (NumberFormatException e) {
        if (token.charAt(0) == '-') {
            value = Integer.MIN_VALUE;
            System.out.println("Error: Integer overflow. Defaulting to Integer.MIN_VALUE");
        }
        else {
            value = Integer.MAX_VALUE;
            System.out.println("Error: Integer overflow. Defaulting to Integer.MAX_VALUE");
        }
    }
    return new Symbol(sym.INTLIT,
        new GeauxIntLitToken(value,
            Pos.linenum,Pos.colnum));
}
{CharLit} {
    Pos.setpos(); 
    Pos.col += 1;
    char c;
    if (yytext().charAt(1) == '\\') {
        if (yytext().charAt(2) == 'n') {
            c = '\n';
        } else if (yytext().charAt(2) == 't') {
            c = '\t';
        } else if (yytext().charAt(2) == '\\') {
            c = '\\';
        } else if (yytext().charAt(2) == '\'') {
            c = '\'';
        } else {
            System.out.println("Error: illegal escaped character in character literal. Defaulting to \\t");
            c = '\t';
        }
    } else {
        c = yytext().charAt(1);
    }
    return new Symbol(sym.CHARLIT,
        new GeauxCharLitToken(c,
            Pos.linenum,Pos.colnum));
}
{StrLit} {
    Pos.setpos(); 
    Pos.col += yytext().length();
    return new Symbol(sym.STRLIT,
        new GeauxStringLitToken(yytext().toString(),
            Pos.linenum,Pos.colnum));
}
{SingleComment} {
    Pos.setpos();
    Pos.col = 1;
}
{MultiComment} {
    Pos.setpos();
    int newlines = 0;
    int posLastNewline = 0;
    String comment = yytext().toString();
    for (int i = 0; i < comment.length(); i++) {
        if (comment.charAt(i) == '\n') {
            newlines += 1;
            posLastNewline = i;
        }
    }
    Pos.line += newlines;
    Pos.col = comment.length() - posLastNewline;
}
[^] {    
    Pos.setpos(); Pos.col += yytext().length();
    return new Symbol(sym.error,
        new GeauxInvalidToken(yytext().toString(), 
            Pos.linenum,Pos.colnum));
}
