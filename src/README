Name: Ryan Lindsey
Class: CS 541-001
Professor: Dr. Raphael Finkel
Program: E (Code Generator)

Description:
    This folder contains my implementation of the code generator for CSX_Go.
    There's a script to run all of the test cases in the tests directory, 
    and Makefile recipes for executing files in the jasmin_tests directory.

Makefile recipes:
    test
        - Compiles 'test-$(TESTNUM).csx_go' in the tests directory and 
            executes it.
    testall
        - Compiles the CSX_Go compiler, then executes all of the tests in the
            test directory. CSXTests.input is piped in, output is written to
            CSXTests.output

    jazz
        - Compiles and executes $(JASMINTEST) in the jasmin_tests directory.

    editjazz
        - Opens $(JASMINTEST) in vim.

Notes:
    CSXtests has an exception thrown for test 18. This is because I couldn't
    find good a way to pipe in the input data for that program. Check 'testall'
    in the Makefile to see how I'm doing it. If you look in CSXTests.output
    you'll see the same exception for test 55 for the same reason.

    I wrote my own tests that are in the tests folder. Tests 45-56 are mine.

    My compiler assumes that you cannot initialize a global variable with a 
    function call (the type-checker doesn't allow forward declarations). It 
    also assumes that array variables can only be printed if they have a 
    subscript value.

    Uninitialized variables are given default values. Integers and booleans
    get 0, characters get 'A'.


Files:
    tests/                          - Directory of provided tests. Tests with
                                       numbers greater than 45 are mine.
    jasmin_tests/                   - Directory of .j files. Most of these are
                                       proof-of-concept for certain compiler
                                       features. 
        debug.j                     - File I used to debug tests. Copy/pasted
                                       from whatever test I was debugging last.
    startup/
        classes/                    - Directory for all compiled java classes
        mytests/                    - Directory for the test script
        ast.java                    - Classes for the Absract Syntax Tree.
        csx_go.cup                  - Productions for the parser. 
        csx_go.jlex                 - Rules for the CSX_Go scanner.
        CSXLib.java                 - Provided helpers for generated code
        CSXTests.input              - Input file for testall.sh. I had trouble
                                       passing input for test 18.
        CSXTests.output             - Output for all tests (including my own).
        CSXtests                    - Output for the provided tests.
        DuplicateException.java     - Provided exception.
        EmptySTException.java       - Provided exception.
        Kinds.java                  - Kinds of variables, using powers of 2
                                        so that I can do type-checking with 
                                        bitwise comparison.
        Makefile                    
        P5.java                     - Driver program for the code generator.
        README                      - This file
        Scanner.java                - Driver for the scanner.
        Symb.java                   - Base class for symbol table entries.
        SymbolInfo.java             - Class for CSXGo symbol table entries.
        SymbolTable.java            - Symbol Table.
        SyntaxErrorException.java   - Provided exception.
        testall.sh                  - Script to run every test in ../tests
        Types.java                  - Types of variables in CSXGo. Using 
                                        powers of 2 instead of enum for
                                        easy bitwise comparison.

// grader: test 29 fails in semantics checking (disallows global and local with same name): -2
	when I change the test to avoid the error, the test succeeds.
// grader: test 32 fails in semantics checking (claims no return): -2
	when I change the test to avoid the error, the test succeeds.
	There are returns, but only inside "if" branches.
// grader: test 36 fails in semantics checking (disallows valid return expression): -0
	when I change the test to avoid the error, the test succeeds.
// grader: test 38 fails in semantics checking (disallows valid return expression): -0
	when I change the test to avoid the error, the test succeeds.
// grader: test 43 fails in semantics checking -2
	 (disallows printing whole char arrays)
	when I change the test to avoid the error, the test succeeds.
// grader: test 45 fails (only extra credit: declarations within blocks): -0

